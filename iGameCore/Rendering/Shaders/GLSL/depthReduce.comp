#version 460
//#extension GL_ARB_bindless_texture : require

layout(local_size_x = 32, local_size_y = 32) in;

uniform sampler2DMS screenDepthMS;
uniform sampler2D myDepthPyramid;

uniform uint level;
uniform uvec2 inDepthPyramidSize;//only used at levels other than 0
uniform uvec2 outDepthPyramidSize;//only used at level 0
layout(binding = 0, r32f) uniform writeonly image2D outDepthPyramid;

void main() {
    uvec2 pos = gl_GlobalInvocationID.xy;
    float minDepth = 1.0f;

    if (level == 0) {
        // generate level 0
        if (pos.x >= outDepthPyramidSize.x || pos.y >= outDepthPyramidSize.y) return;

        ivec2 screenDepthSize = textureSize(screenDepthMS);
        vec2 scale = vec2(screenDepthSize) / vec2(outDepthPyramidSize);

        vec2 inputStart = vec2(pos) * scale;
        vec2 inputEnd = inputStart + scale;

        int numSamples = textureSamples(screenDepthMS);
        for (int y = int(inputStart.y); y < int(inputEnd.y); ++y) {
            for (int x = int(inputStart.x); x < int(inputEnd.x); ++x) {
                for (int s = 0; s < numSamples; ++s) {
                    float sampleDepth = texelFetch(screenDepthMS, ivec2(x, y), s).r;
                    minDepth = min(minDepth, sampleDepth);
                }
            }
        }
    } else {
        // generate other level
        if (pos.x * 2 >= inDepthPyramidSize.x || pos.y * 2 >= inDepthPyramidSize.y) return;

        uvec2 pos_0 = pos * 2 + uvec2(0, 0);
        uvec2 pos_1 = pos * 2 + uvec2(0, 1);
        uvec2 pos_2 = pos * 2 + uvec2(1, 0);
        uvec2 pos_3 = pos * 2 + uvec2(1, 1);

        float preLevel = float(level - 1);
        float depth_0 = textureLod(myDepthPyramid, (vec2(pos_0) + vec2(0.5)) / vec2(inDepthPyramidSize), preLevel).r;
        float depth_1 = textureLod(myDepthPyramid, (vec2(pos_1) + vec2(0.5)) / vec2(inDepthPyramidSize), preLevel).r;
        float depth_2 = textureLod(myDepthPyramid, (vec2(pos_2) + vec2(0.5)) / vec2(inDepthPyramidSize), preLevel).r;
        float depth_3 = textureLod(myDepthPyramid, (vec2(pos_3) + vec2(0.5)) / vec2(inDepthPyramidSize), preLevel).r;

        // reversed-z buffer
        // depth range: 1.0(near plane) -> 0.0(far plane)
        minDepth = min(min(depth_0, depth_1), min(depth_2, depth_3));
    }

    imageStore(outDepthPyramid, ivec2(pos), vec4(minDepth, 0.0f, 0.0f, 0.0f));
}